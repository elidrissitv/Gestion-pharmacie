//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace pharma.EFModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GestionMagasinPharmacieEntities5 : DbContext
    {
        public GestionMagasinPharmacieEntities5()
            : base("name=GestionMagasinPharmacieEntities5")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Entreprise> Entreprise { get; set; }
        public virtual DbSet<Stock> Stock { get; set; }
        public virtual DbSet<StockIn> StockIn { get; set; }
        public virtual DbSet<Utilisateurs> Utilisateurs { get; set; }
        public virtual DbSet<Vente> Vente { get; set; }
        public virtual DbSet<ContacterNous> ContacterNous { get; set; }
    
        public virtual int AjouterClient(string nom, string prenom, string telephone, string adresse, string ville)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("Adresse", adresse) :
                new ObjectParameter("Adresse", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("Ville", ville) :
                new ObjectParameter("Ville", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterClient", nomParameter, prenomParameter, telephoneParameter, adresseParameter, villeParameter);
        }
    
        public virtual int AjouterEntreprise(string nom, string personneContact, string adresse, string coordonneesContact, Nullable<System.DateTime> dateEntree)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var personneContactParameter = personneContact != null ?
                new ObjectParameter("PersonneContact", personneContact) :
                new ObjectParameter("PersonneContact", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("Adresse", adresse) :
                new ObjectParameter("Adresse", typeof(string));
    
            var coordonneesContactParameter = coordonneesContact != null ?
                new ObjectParameter("CoordonneesContact", coordonneesContact) :
                new ObjectParameter("CoordonneesContact", typeof(string));
    
            var dateEntreeParameter = dateEntree.HasValue ?
                new ObjectParameter("DateEntree", dateEntree) :
                new ObjectParameter("DateEntree", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterEntreprise", nomParameter, personneContactParameter, adresseParameter, coordonneesContactParameter, dateEntreeParameter);
        }
    
        public virtual int AjouterStock(string nomArticle, string description, Nullable<int> quantiteTotale, Nullable<int> quantiteVendue, Nullable<decimal> prixTotal, Nullable<decimal> prixUnitaire, Nullable<System.DateTime> dateEntree)
        {
            var nomArticleParameter = nomArticle != null ?
                new ObjectParameter("NomArticle", nomArticle) :
                new ObjectParameter("NomArticle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantiteTotaleParameter = quantiteTotale.HasValue ?
                new ObjectParameter("QuantiteTotale", quantiteTotale) :
                new ObjectParameter("QuantiteTotale", typeof(int));
    
            var quantiteVendueParameter = quantiteVendue.HasValue ?
                new ObjectParameter("QuantiteVendue", quantiteVendue) :
                new ObjectParameter("QuantiteVendue", typeof(int));
    
            var prixTotalParameter = prixTotal.HasValue ?
                new ObjectParameter("PrixTotal", prixTotal) :
                new ObjectParameter("PrixTotal", typeof(decimal));
    
            var prixUnitaireParameter = prixUnitaire.HasValue ?
                new ObjectParameter("PrixUnitaire", prixUnitaire) :
                new ObjectParameter("PrixUnitaire", typeof(decimal));
    
            var dateEntreeParameter = dateEntree.HasValue ?
                new ObjectParameter("DateEntree", dateEntree) :
                new ObjectParameter("DateEntree", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterStock", nomArticleParameter, descriptionParameter, quantiteTotaleParameter, quantiteVendueParameter, prixTotalParameter, prixUnitaireParameter, dateEntreeParameter);
        }
    
        public virtual int AjouterStockIn(string nomArticle, string description, Nullable<int> quantiteEntree, Nullable<decimal> prixUnitaire, Nullable<int> entrepriseID, Nullable<System.DateTime> dateExpiration, string lieuEntree, Nullable<System.DateTime> dateEntree)
        {
            var nomArticleParameter = nomArticle != null ?
                new ObjectParameter("NomArticle", nomArticle) :
                new ObjectParameter("NomArticle", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantiteEntreeParameter = quantiteEntree.HasValue ?
                new ObjectParameter("QuantiteEntree", quantiteEntree) :
                new ObjectParameter("QuantiteEntree", typeof(int));
    
            var prixUnitaireParameter = prixUnitaire.HasValue ?
                new ObjectParameter("PrixUnitaire", prixUnitaire) :
                new ObjectParameter("PrixUnitaire", typeof(decimal));
    
            var entrepriseIDParameter = entrepriseID.HasValue ?
                new ObjectParameter("EntrepriseID", entrepriseID) :
                new ObjectParameter("EntrepriseID", typeof(int));
    
            var dateExpirationParameter = dateExpiration.HasValue ?
                new ObjectParameter("DateExpiration", dateExpiration) :
                new ObjectParameter("DateExpiration", typeof(System.DateTime));
    
            var lieuEntreeParameter = lieuEntree != null ?
                new ObjectParameter("LieuEntree", lieuEntree) :
                new ObjectParameter("LieuEntree", typeof(string));
    
            var dateEntreeParameter = dateEntree.HasValue ?
                new ObjectParameter("DateEntree", dateEntree) :
                new ObjectParameter("DateEntree", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterStockIn", nomArticleParameter, descriptionParameter, quantiteEntreeParameter, prixUnitaireParameter, entrepriseIDParameter, dateExpirationParameter, lieuEntreeParameter, dateEntreeParameter);
        }
    
        public virtual int AjouterUtilisateur(string nomUtilisateur, string motDePasse, string typeUtilisateur, Nullable<System.DateTime> dateInscription)
        {
            var nomUtilisateurParameter = nomUtilisateur != null ?
                new ObjectParameter("NomUtilisateur", nomUtilisateur) :
                new ObjectParameter("NomUtilisateur", typeof(string));
    
            var motDePasseParameter = motDePasse != null ?
                new ObjectParameter("MotDePasse", motDePasse) :
                new ObjectParameter("MotDePasse", typeof(string));
    
            var typeUtilisateurParameter = typeUtilisateur != null ?
                new ObjectParameter("TypeUtilisateur", typeUtilisateur) :
                new ObjectParameter("TypeUtilisateur", typeof(string));
    
            var dateInscriptionParameter = dateInscription.HasValue ?
                new ObjectParameter("DateInscription", dateInscription) :
                new ObjectParameter("DateInscription", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterUtilisateur", nomUtilisateurParameter, motDePasseParameter, typeUtilisateurParameter, dateInscriptionParameter);
        }
    
        public virtual int MettreAJourStock(Nullable<int> stockID, Nullable<int> quantiteVendue, Nullable<int> quantiteDisponible)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            var quantiteVendueParameter = quantiteVendue.HasValue ?
                new ObjectParameter("QuantiteVendue", quantiteVendue) :
                new ObjectParameter("QuantiteVendue", typeof(int));
    
            var quantiteDisponibleParameter = quantiteDisponible.HasValue ?
                new ObjectParameter("QuantiteDisponible", quantiteDisponible) :
                new ObjectParameter("QuantiteDisponible", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MettreAJourStock", stockIDParameter, quantiteVendueParameter, quantiteDisponibleParameter);
        }
    
        public virtual int MettreAJourUtilisateur(Nullable<int> utilisateurID, string nomUtilisateur, string motDePasse, string typeUtilisateur)
        {
            var utilisateurIDParameter = utilisateurID.HasValue ?
                new ObjectParameter("UtilisateurID", utilisateurID) :
                new ObjectParameter("UtilisateurID", typeof(int));
    
            var nomUtilisateurParameter = nomUtilisateur != null ?
                new ObjectParameter("NomUtilisateur", nomUtilisateur) :
                new ObjectParameter("NomUtilisateur", typeof(string));
    
            var motDePasseParameter = motDePasse != null ?
                new ObjectParameter("MotDePasse", motDePasse) :
                new ObjectParameter("MotDePasse", typeof(string));
    
            var typeUtilisateurParameter = typeUtilisateur != null ?
                new ObjectParameter("TypeUtilisateur", typeUtilisateur) :
                new ObjectParameter("TypeUtilisateur", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MettreAJourUtilisateur", utilisateurIDParameter, nomUtilisateurParameter, motDePasseParameter, typeUtilisateurParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SupprimerClient(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerClient", clientIDParameter);
        }
    
        public virtual int SupprimerEntreprise(Nullable<int> entrepriseID)
        {
            var entrepriseIDParameter = entrepriseID.HasValue ?
                new ObjectParameter("EntrepriseID", entrepriseID) :
                new ObjectParameter("EntrepriseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerEntreprise", entrepriseIDParameter);
        }
    
        public virtual int SupprimerStock(Nullable<int> stockID)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerStock", stockIDParameter);
        }
    
        public virtual int SupprimerUtilisateur(Nullable<int> utilisateurID)
        {
            var utilisateurIDParameter = utilisateurID.HasValue ?
                new ObjectParameter("UtilisateurID", utilisateurID) :
                new ObjectParameter("UtilisateurID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerUtilisateur", utilisateurIDParameter);
        }
    
        public virtual int InsertVente(Nullable<int> clientID, string nomArticle, Nullable<decimal> prixUnitaire, Nullable<int> quantiteVendue, Nullable<decimal> prixTotal, Nullable<System.DateTime> dateTransaction)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var nomArticleParameter = nomArticle != null ?
                new ObjectParameter("NomArticle", nomArticle) :
                new ObjectParameter("NomArticle", typeof(string));
    
            var prixUnitaireParameter = prixUnitaire.HasValue ?
                new ObjectParameter("PrixUnitaire", prixUnitaire) :
                new ObjectParameter("PrixUnitaire", typeof(decimal));
    
            var quantiteVendueParameter = quantiteVendue.HasValue ?
                new ObjectParameter("QuantiteVendue", quantiteVendue) :
                new ObjectParameter("QuantiteVendue", typeof(int));
    
            var prixTotalParameter = prixTotal.HasValue ?
                new ObjectParameter("PrixTotal", prixTotal) :
                new ObjectParameter("PrixTotal", typeof(decimal));
    
            var dateTransactionParameter = dateTransaction.HasValue ?
                new ObjectParameter("DateTransaction", dateTransaction) :
                new ObjectParameter("DateTransaction", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertVente", clientIDParameter, nomArticleParameter, prixUnitaireParameter, quantiteVendueParameter, prixTotalParameter, dateTransactionParameter);
        }
    }
}
